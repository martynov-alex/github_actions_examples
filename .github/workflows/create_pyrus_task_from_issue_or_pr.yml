name: Create Pyrus task from issue or PR

on:
  workflow_call:
    # Входные данные
    inputs:
      # Тип: issue или PR
      TYPE:
        type: string
        required: true
      # Название пакета
      PACKAGE_NAME:
        type: string
        required: true
      # Заголовок issue или PR
      TITLE:
        type: string
        required: true
      # Тело issue или PR
      BODY:
        type: string
        required: true
      # Ссылка на issue или PR
      LINK:
        type: string
        required: true
    # Выходные данные
    outputs:
      # Номер созданной задачи
      TASK_ID:
        value: ${{ jobs.create_pyrus_task.outputs.task_id }}
    # Креды Pyrus бота, который будет создавать задачи
    secrets:
      LOGIN:
        required: true
      SECURITY_KEY:
        required: true

jobs:
  login_to_pyrus:
    name: Login to Pyrus
    uses: ./.github/workflows/login_to_pyrus.yml
    secrets:
      LOGIN: ${{ secrets.LOGIN }}
      SECURITY_KEY: ${{ secrets.SECURITY_KEY }}

  create_pyrus_task:
    name: Create Pyrus task from issue or PR
    runs-on: ubuntu-latest
    needs: login_to_pyrus
    env:
      PYRUS_TOKEN: ${{ secrets.PYRUS_TOKEN }}
    outputs:
      task_id: ${{ steps.create_task.outputs.task_id }}
    steps:
      - name: Creating a task in Pyrus
        id: create_task
        run: |
          # Creating a task in Pyrus
          response=$(curl -X POST \
          https://api.pyrus.com/v4/tasks \
          -H 'Content-Type: application/json' \
          -H "Authorization: Bearer $PYRUS_TOKEN" \
          -d '{
            "form_id": "1376197",
            "fields": [
              {
                "id": "8",
                "value": "${{ inputs.TYPE }}"
              },
              {
                "id": "6",
                "value": "${{ inputs.PACKAGE_NAME }}"
              },
              {
                "id": "1",
                "value": "${{ inputs.TITLE }}"
              },
              {
                "id": "7",
                "value": "${{ inputs.BODY }}"
              },
              {
                "id": "5",
                "value": "${{ inputs.LINK }}"
              }
            ]
          }')

          # Check for the absence of 'task' field in the response
          if ! echo "$response" | jq -e '.task' > /dev/null; then
            echo "Error in API request. Response: $response"
            exit 1
          else
            id=$(echo "$response" | jq -r '.task.id')
            echo "task_id=$id" >> $GITHUB_OUTPUT
            echo "Task created successfully."
          fi

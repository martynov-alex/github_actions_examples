name: Create Pyrus task from issue or PR

on:
  workflow_call:
    inputs:
      # Issue or PR
      TYPE:
        type: string
        required: true
      PACKAGE_NAME:
        type: string
        required: true
      TITLE:
        type: string
        required: true
      BODY:
        type: string
        required: true
      LINK:
        type: string
        required: true
    outputs:
      # Pyrus task ID which was created
      PYRUS_TASK_ID:
        value: ${{ jobs.create_pyrus_task.outputs.task_id }}
    # Authentication data for Pyrus bot which will create tasks
    secrets:
      LOGIN:
        required: true
      SECURITY_KEY:
        required: true

jobs:
  create_pyrus_task:
    name: Create Pyrus task from issue or PR
    runs-on: ubuntu-latest
    outputs:
      task_id: ${{ steps.create_task.outputs.task_id }}
    env:
      title: ${{ inputs.TITLE }}
      body: ${{ inputs.BODY }}
      login: ${{ secrets.LOGIN }}
      security_key: ${{ secrets.SECURITY_KEY }}
    steps:
      - name: Authentication with receiving a token
        id: auth
        run: |
          response=$(curl -X POST \
          https://api.pyrus.com/v4/auth \
          -H 'Content-Type: application/json' \
          -d '{
            "login": "${{ env.login }}",
            "security_key": "${{ env.security_key }}"
            }'
          )

          # Check for the absence of 'access_token' field in the response
          if ! echo "$response" | jq -e '.access_token' > /dev/null; then
            echo "Error in API request. Response: $response"
            exit 1
          else
            token=$(echo "$response" | jq -r '.access_token')
            echo "pyrus_token=$token" >> $GITHUB_ENV
            echo "Token received successfully."
          fi

      - name: Creating a Pyrus task
        id: create_task
        run: |
          response=$(curl -X POST \
          https://api.pyrus.com/v4/tasks \
          -H 'Content-Type: application/json' \
          -H "Authorization: Bearer $pyrus_token" \
          -d '{
            "form_id": "1376197",
            "fields": [
              {
                "id": "8",
                "value": "${{ inputs.TYPE }}"
              },
              {
                "id": "6",
                "value": "${{ inputs.PACKAGE_NAME }}"
              },
              {
                "id": "1",
                "value": "${{ env.title }}"
              },
              {
                "id": "7",
                "value": "${{ env.body }}"
              },
              {
                "id": "5",
                "value": "${{ inputs.LINK }}"
              }
            ]
          }')

          # Check for the absence of 'task' field in the response
          if ! echo "$response" | jq -e '.task' > /dev/null; then
            echo "Error in API request. Response: $response"
            exit 1
          else
            id=$(echo "$response" | jq -r '.task.id')
            echo "task_id=$id" >> $GITHUB_OUTPUT
            echo "Task created successfully."
          fi
